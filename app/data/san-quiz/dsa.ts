import {QuestionType} from "~/data/san-quiz/QuizTypes";

const data: QuestionType[] = [
  {
    q: "What is a data structure?",
    a: "A programming language",
    b: "A collection of algorithms",
    c: "A way to store and organize data",
    d: "A type of computer hardware",
    ans: "c",
    e: "A data structure is a way to store and organize data efficiently, enhancing access and manipulation, unlike programming languages, algorithms, or computer hardware.",
  },
  {
    q: "What are the disadvantages of arrays?",
    a: "Index value of an array can be negative",
    b: "Elements are sequentially accessed",
    c: "Data structure like queue or stack cannot be implemented",
    d: "There are chances of wastage of memory space if elements inserted in an array are lesser than the allocated size",
    ans: "d",
    e: "Arrays are of fixed size. If we insert elements less than the allocated size, unoccupied positions can't be used again. Wastage will occur in memory.",
  },
  {
    q: "Which data structure is used for implementing recursion?",
    a: "Stack",
    b: "Queue",
    c: "List",
    d: "Array",
    ans: "a",
    e: "Stacks are used for the implementation of Recursion.",
  },
  {
    q: "The data structure required to check whether an expression contains a balanced parenthesis is?",
    a: "Queue",
    b: "Stack",
    c: "Tree",
    d: "Array",
    ans: "b",
    e: "The stack is a simple data structure in which elements are added and removed based on the LIFO principle. Open parenthesis is pushed into the stack and a closed parenthesis pops out elements till the top element of the stack is its corresponding open parenthesis. If the stack is empty, parenthesis is balanced otherwise it is unbalanced.",
  },
  {
    q: "Which of the following is not the application of stack?",
    a: "Data Transfer between two asynchronous process",
    b: "Compiler Syntax Analyzer",
    c: "Tracking of local variables at run time",
    d: "A parentheses balancing program",
    ans: "a",
    e: "Data transfer between the two asynchronous process uses the queue data structure for synchronisation. The rest are all stack applications.",
  },
  {
    q: "Which data structure is needed to convert infix notation to postfix notation?",
    a: "Tree",
    b: "Branch",
    c: "Stack",
    d: "Queue",
    ans: "c",
    e: "The Stack data structure is used to convert infix expression to postfix expression. The purpose of stack is to reverse the order of the operators in the expression. It also serves as a storage structure, as no operator can be printed until both of its operands have appeared.",
  },
  {
    q: "Which data structure is needed to convert infix notation to postfix notation?",
    a: "Binary Search Tree",
    b: "Array",
    c: "Stack",
    d: "Queue",
    ans: "c",
    e: "A stack is employed to convert infix to postfix notations as it helps manage operator precedence efficiently.",
  },
  {
    q: "Which data structure is based on the Last In First Out (LIFO) principle?",
    a: "Tree",
    b: "Linked List",
    c: "Stack",
    d: "Queue",
    ans: "c",
    e: "The data structure that follows the Last In First Out (LIFO) principle is the Stack. It operates like a stack of objects, making it suitable for specific-order management.",
  },
  {
    q: "The data structure required for Breadth First Traversal on a graph is?",
    a: "Array",
    b: "Stack",
    c: "Tree",
    d: "Queue",
    ans: "d",
    e: "In Breadth First Search Traversal, BFS, starting vertex is first taken and adjacent vertices which are unvisited are also taken. To follow the order and retrieve nodes efficiently, the queue is needed since it follows First In First Out (FIFO).",
  },
  {
    q: "What is a bit array?",
    a: "Data structure that compactly stores bits",
    b: "Data structure for representing arrays of records",
    c: "Array in which elements are not present in continuous locations",
    d: "An array in which most of the elements have the same value",
    ans: "a",
    e: "It compactly stores bits and exploits bit-level parallelism.",
  },
  {
    q: "Which of the following tree data structures is not a balanced binary tree?",
    a: "Splay tree",
    b: "B-tree",
    c: "AVL tree",
    d: "Red-black tree",
    ans: "b",
    e: "All the tree data structures given in options are balanced, but B-tree can have more than two children.",
  },
  {
    q: "Which of the following is not the type of queue?",
    a: "Priority queue",
    b: "Circular queue",
    c: "Single ended queue",
    d: "Ordinary queue",
    ans: "c",
    e: "Queue always has two ends. So, single ended queue is not the type of queue.",
  },
  {
    q: "Which algorithm is used in the top tree data structure?",
    a: "Backtracking",
    b: "Divide and Conquer",
    c: "Branch",
    d: "Greedy",
    ans: "b",
    e: "Top tree is a type of data structure which is based on unrooted dynamic binary tree and is used to solve path-related problems.",
  },
];

export default data;
